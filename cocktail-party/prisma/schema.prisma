generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    //url      = "postgresql://admin:password123@localhost:5432/cocktail-party"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    firstName     String?
    lastName      String?
    role          Role      @default(BARTENDER)
    bars          Bar[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @default(now()) @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Drink {
    id           String       @id @default(uuid())
    name         String       @unique
    imageUrl     String
    tutorialUrl  String?
    instructions String
    ingredients  RecipePart[]
    orders       Order[]
    categories   Category[]
}

model Ingredient {
    id       String       @id @default(uuid())
    name     String       @unique
    category String?
    drinks   RecipePart[]
    bars     Bar[]
}

model Bar {
    id          String       @id @default(uuid())
    name        String       @unique
    category    String?
    bartenderId String
    bartender   User         @relation(fields: [bartenderId], references: [id])
    order       Order[]
    ingredients Ingredient[]
}

model RecipePart {
    drink        Drink           @relation(fields: [drinkId], references: [id])
    drinkId      String
    ingredient   Ingredient      @relation(fields: [ingredientId], references: [id])
    ingredientId String
    amount       Decimal
    unit         MeasurementUnit

    @@id([drinkId, ingredientId])
}

model Order {
    id        String      @id @default(uuid())
    guestName String      @unique
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    drink     Drink       @relation(fields: [drinkId], references: [id])
    drinkId   String
    status    OrderStatus @default(PENDING)
    barId     String
    bar       Bar         @relation(fields: [barId], references: [id])
}

model Category {
    id     String  @id @default(uuid())
    name   String  @unique
    drinks Drink[]
}

enum Role {
    ADMIN
    BARTENDER
}

enum MeasurementUnit {
    OZ
    ML
    DASH
    SLICE
    WHEEL
    PEEL
    TWIST
    WEDGE
    PIECE
    SPOON
    PINCH
}

enum OrderStatus {
    PENDING
    RECEIVED
    CANCELED
    DONE
}
