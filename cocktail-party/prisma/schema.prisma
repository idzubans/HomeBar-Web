generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    firstName     String?
    lastName      String?
    role          Role         @default(BARTENDER)
    parties       Party[]
    ingredients   Ingredient[]
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @default(now()) @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Drink {
    id          String       @id @default(uuid())
    name        String       @unique
    imageUrl    String
    tutorialUrl String?
    ingredients RecipePart[]
    orders      Order[]
    categories  Category[]
}

model Ingredient {
    id         String       @id @default(uuid())
    name       String       @unique
    imageUrl   String       @default("https://res.cloudinary.com/dljchk64j/image/upload/c_thumb,w_200,g_face/v1667150402/cocktails/categories/classic_qv9cgx.png")
    drinks     RecipePart[]
    bartenders User[]
}

model RecipePart {
    drink        Drink           @relation(fields: [drinkId], references: [id])
    drinkId      String
    ingredient   Ingredient      @relation(fields: [ingredientId], references: [id])
    ingredientId String
    amount       Decimal
    unit         MeasurementUnit

    @@id([drinkId, ingredientId])
}

model Order {
    id        String      @id @default(uuid())
    guestName String      @unique
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    drink     Drink       @relation(fields: [drinkId], references: [id])
    drinkId   String
    status    OrderStatus @default(PENDING)
    partyId   String
    party     Party       @relation(fields: [partyId], references: [id])
}

model Category {
    id       String  @id @default(uuid())
    name     String  @unique
    imageUrl String  @default("https://res.cloudinary.com/dljchk64j/image/upload/c_thumb,w_200,g_face/v1667150908/cocktails/ingredients/gin_iciv3k.png")
    drinks   Drink[]
}

model Party {
    id        String   @id @default(uuid())
    name      String
    endDate   DateTime
    createdAt DateTime @default(now())
    orders    Order[]
    bartender User     @relation(fields: [userId], references: [id])
    userId    String
    guests    Guest[]
}

model Guest {
    id        String   @id @default(uuid())
    name      String
    party     Party    @relation(fields: [partyId], references: [id])
    partyId   String
    createdAt DateTime @default(now())
}

enum Role {
    ADMIN
    BARTENDER
}

enum MeasurementUnit {
    OZ
    ML
    DASH
    SLICE
    PEEL
    WHOLE
    SPOON
}

enum OrderStatus {
    PENDING
    RECEIVED
    CANCELED
    DONE
}
